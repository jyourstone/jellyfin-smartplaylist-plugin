---
alwaysApply: true
---

## Development Environment
Local development is contained in `/dev` directory. Use `./build-local.sh` from `/dev` for builds. Don't modify files outside `/dev` for local testing.

## Code Patterns
Use C# 12+ collection expressions for cleaner code.

## UI Development
When adding form fields, implement across all flows: create form (defaults), edit form (backwards compatibility), display views, API handling, backend DTOs.

Implementation pattern:
- HTML: Add to create/edit sections
- JavaScript: populateStaticSelects() for defaults, edit form loading, form submission, display functions  
- Backend: Update DTOs and validation

JavaScript pattern:
```javascript
// Create defaults
page.querySelector('#newField').value = config.DefaultNewField || 'default';

// Edit with backwards compatibility  
const fieldValue = playlist.NewField !== undefined ? playlist.NewField : 'default';
page.querySelector('#newField').value = fieldValue;

// Form submission
const newFieldValue = page.querySelector('#newField').value;
playlistDto.NewField = newFieldValue;

// Display
const displayValue = playlist.NewField || 'Default';
html += '<strong>New Field:</strong> ' + displayValue + '<br>';
```

## Metadata Extraction Patterns

### Direct Property Access (Cheap Operations)
```csharp
operand.Genres = baseItem.Genres.ToList();
operand.Studios = baseItem.Studios.ToList();
operand.Tags = baseItem.Tags?.ToList() ?? new List<string>();
operand.Name = baseItem.Name;
operand.ProductionYear = baseItem.ProductionYear.GetValueOrDefault();
```

### Library Manager Queries (Expensive Operations)
```csharp
var peopleQuery = new InternalPeopleQuery { ItemId = baseItem.Id };
var getPeopleMethod = libraryManager.GetType().GetMethod("GetPeople", new[] { typeof(InternalPeopleQuery) });
var result = getPeopleMethod.Invoke(libraryManager, new object[] { peopleQuery });
```

### Reflection-Based Discovery
```csharp
var properties = someObject.GetType().GetProperties().Select(p => p.Name).ToArray();
logger?.LogDebug("Available properties: [{Properties}]", string.Join(", ", properties));

var methods = someObject.GetType().GetMethods()
    .Where(m => m.Name.Contains("keyword"))
    .Select(m => m.Name)
    .ToArray();
logger?.LogDebug("Methods containing 'keyword': [{Methods}]", string.Join(", ", methods));
```

## Debugging Workflow
1. Make code changes
2. Build: `./build-local.sh` from `/dev`
3. Wait for user input
4. Check logs: `tail -n 100 jellyfin-data/config/log/log_YYYYMMDD.log`

Log analysis:
```bash
grep -A 10 -B 5 "specific_debug_message" jellyfin-data/config/log/log_*.log
tail -f jellyfin-data/config/log/log_*.log | grep "SmartPlaylist"
grep -c "expensive_operation" jellyfin-data/config/log/log_*.log
```

Debugging unknown data structures:
```csharp
if (result != null)
{
    logger?.LogDebug("Result type: {Type}", result.GetType().Name);
    
    var properties = result.GetType().GetProperties().Select(p => p.Name).ToArray();
    logger?.LogDebug("Properties: [{Props}]", string.Join(", ", properties));
    
    if (result is IEnumerable<object> enumerable)
    {
        var items = enumerable.Take(3).ToList();
        logger?.LogDebug("Enumerable with {Count} items (showing first 3)", items.Count);
        
        foreach (var item in items)
        {
            var itemProps = item.GetType().GetProperties().Select(p => p.Name).ToArray();
            logger?.LogDebug("Item properties: [{Props}]", string.Join(", ", itemProps));
        }
    }
}
```

Always check README.md when adding or changing features and update it to reflect the changes if needed.

## Performance Optimization
Two-phase filtering for expensive fields (AudioLanguages, People):
1. Phase 1 (Cheap): Extract basic properties, evaluate non-expensive rules
2. Phase 2 (Expensive): Only for items passing Phase 1, extract expensive data, evaluate complete rules

Adding new expensive fields:
1. Add property to Operand class as `List<string>` or appropriate type
2. Modify Factory.cs with extraction logic in expensive field parameter
3. Update SmartPlaylist.cs filtering with field detection and expensive field condition
4. Add to API in appropriate field category in SmartPlaylistController.cs
5. Update UI in config.html if collection field

## Jellyfin Data Patterns

### BaseItem Properties (Direct Access)
- Name, ProductionYear, OfficialRating
- Genres, Studios, Tags (collections)
- CommunityRating, CriticRating (may need .GetValueOrDefault())
- DateCreated, DateModified, DateLastRefreshed
- IsPlayed(user) (user-specific)

### Requires Library Manager Queries
- People/Cast/Crew: Use InternalPeopleQuery with ItemId
- Audio/Subtitle streams: Access via MediaSources property or GetMediaStreams() method
- Related items: Use appropriate query objects

### User Data (Requires UserDataManager)
- PlayCount, IsFavorite, LastPlayedDate

## Music Fields
Artists (track-level) and AlbumArtists (album-level) are separate from People field (movies/TV only). These are cheap operations (simple property access via reflection), not expensive like People (database queries) or AudioLanguages (media stream analysis). NOT included in expensive field optimization logic.


### Music Fields

**Artists** (track-level) and **AlbumArtists** (album-level) are separate from **People** field (movies/TV only). These are **cheap operations** (simple property access via reflection), not expensive like People (database queries) or AudioLanguages (media stream analysis). They are NOT included in expensive field optimization logic.