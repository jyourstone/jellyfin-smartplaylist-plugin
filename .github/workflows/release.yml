name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: 8.0.x
  PRERELEASE_STR: false
  TARGET_ABI: 10.10.0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup jq
        run: sudo apt-get install -y jq

      - name: Restore dependencies
        run: dotnet restore

      - name: Build plugin
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          echo "Building version: $VERSION"
          dotnet build Jellyfin.Plugin.SmartPlaylist/Jellyfin.Plugin.SmartPlaylist.csproj \
            --configuration Release --no-restore -o ./build_output \
            /p:Version=$VERSION /p:AssemblyVersion=$VERSION

      - name: Create Plugin Zip
        run: |
          mkdir -p staging
          cp ./build_output/Jellyfin.Plugin.SmartPlaylist.dll staging/
          cp images/logo.jpg staging/logo.jpg
          cd staging
          zip -X ../Jellyfin.Plugin.SmartPlaylist_${{ github.ref_name }}.zip *
          cd ..

      - name: Create Release (auto notes from PRs)
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: ./Jellyfin.Plugin.SmartPlaylist_${{ github.ref_name }}.zip
          draft: false
          # convert "true"/"false" string to boolean
          prerelease: ${{ fromJSON(env.PRERELEASE_STR) }}
          generate_release_notes: true
          token: ${{ secrets.PAT }}

      - name: Read Release Body
        id: read_release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e
          resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                 "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
          body=$(echo "$resp" | jq -r '.body // ""')
          {
            echo 'body<<EOM'
            echo "$body"
            echo 'EOM'
          } >> "$GITHUB_OUTPUT"

      - name: Update External Manifest
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          ASSEMBLY_VERSION="${VERSION}"
          ZIP_NAME="Jellyfin.Plugin.SmartPlaylist_${{ github.ref_name }}.zip"
          CHECKSUM=$(md5sum ${ZIP_NAME} | cut -d' ' -f1 | tr '[:lower:]' '[:upper:]')
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${ZIP_NAME}"
          TARGET_ABI="${{ env.TARGET_ABI }}"
          TIMESTAMP=$(date -u +'%Y-%m-%d')
          CHANGELOG="${{ steps.read_release.outputs.body }}"
          # Sanitize changelog: remove trailing "by @user in <link>" fragments GitHub adds
          CLEAN_CHANGELOG=$(echo "$CHANGELOG" | sed -E 's/[[:space:]]*by @[[:alnum:]-]+ in https?:\/\/[^[:space:]]+//g')
          MANIFEST_REPO="jyourstone/jellyfin-plugin-manifest"
          PLUGIN_GUID="A0A2A7B2-747A-4113-8B39-757A9D267C79"

          git clone https://x-access-token:${{ secrets.PAT }}@github.com/${MANIFEST_REPO}.git manifest-repo
          cd manifest-repo
          MANIFEST_FILE="manifest.json"

          if [ ! -f "$MANIFEST_FILE" ]; then
            echo "[]" > "$MANIFEST_FILE"
          fi

          NEW_PACKAGE=$(jq -n \
            --arg version "$ASSEMBLY_VERSION" \
            --arg abi "$TARGET_ABI" \
            --arg url "$DOWNLOAD_URL" \
            --arg checksum "$CHECKSUM" \
            --arg changelog "$CLEAN_CHANGELOG" \
            --arg timestamp "$TIMESTAMP" \
            '{version: $version, targetAbi: $abi, sourceUrl: $url, checksum: $checksum, changelog: $changelog, timestamp: $timestamp}')

          if ! jq -e --arg guid "$PLUGIN_GUID" 'any(.[]; .guid == $guid)' "$MANIFEST_FILE" > /dev/null; then
            PLUGIN_ENTRY=$(jq -n \
              --arg name "SmartPlaylist" \
              --arg guid "$PLUGIN_GUID" \
              --arg overview "Smart Playlist plugin for Jellyfin." \
              --arg description "A rebuilt and modernized plugin to create smart, rule-based playlists in Jellyfin." \
              --arg category "General" \
              --arg owner "jyourstone" \
              --arg imageUrl "https://raw.githubusercontent.com/jyourstone/jellyfin-smartplaylist-plugin/master/images/logo.jpg" \
              '{name: $name, guid: $guid, overview: $overview, description: $description, category: $category, owner: $owner, imageUrl: $imageUrl, versions: []}')
            jq --argjson new_entry "$PLUGIN_ENTRY" '. += [$new_entry]' "$MANIFEST_FILE" > tmp && mv tmp "$MANIFEST_FILE"
          fi

          jq --argjson new_package "$NEW_PACKAGE" --arg guid "$PLUGIN_GUID" \
            '(.[] | select(.guid == $guid).versions) |= [$new_package] + .' \
            "$MANIFEST_FILE" > tmp_manifest.json && mv tmp_manifest.json "$MANIFEST_FILE"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add manifest.json
          git commit -m "Update manifest for SmartPlaylist v${VERSION}"
          git push